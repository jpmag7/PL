Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> Program
Rule 1     Program -> Declarations Statements
Rule 2     Declarations -> Declarations Declaration
Rule 3     Declarations -> <empty>
Rule 4     Declaration -> Type IdList
Rule 5     Type -> INT
Rule 6     Type -> STR
Rule 7     IdList -> IdList , id
Rule 8     IdList -> id
Rule 9     Statements -> Statements Statement
Rule 10    Statements -> Statement
Rule 11    Statement -> id = Exp
Rule 12    Statement -> PRINT ( PrintArgs )
Rule 13    PrintArgs -> PrintArgs , PrintArg
Rule 14    PrintArgs -> PrintArg
Rule 15    PrintArg -> str
Rule 16    PrintArg -> Exp
Rule 17    Exp -> Exp + Term
Rule 18    Exp -> Exp - Term
Rule 19    Exp -> Term
Rule 20    Term -> Term * Factor
Rule 21    Term -> Term / Factor
Rule 22    Term -> Factor
Rule 23    Factor -> INT ( Exp )
Rule 24    Factor -> INPUT ( str )
Rule 25    Factor -> id
Rule 26    Factor -> num
Rule 27    Statement -> WHILE ( Cond ) CondStatements
Rule 28    Statement -> IF ( Cond ) CondStatements Else
Rule 29    Else -> <empty>
Rule 30    Else -> ELSE CondStatements
Rule 31    CondStatements -> Statement
Rule 32    CondStatements -> { Statements }
Rule 33    Cond -> Cond OR Cond2
Rule 34    Cond -> Cond2
Rule 35    Cond2 -> Cond2 AND Cond3
Rule 36    Cond2 -> Cond3
Rule 37    Cond3 -> NOT ExpRel
Rule 38    Cond3 -> ExpRel
Rule 39    Cond3 -> TRUE
Rule 40    Cond3 -> FALSE
Rule 41    ExpRel -> Exp > Exp
Rule 42    ExpRel -> Exp < Exp
Rule 43    ExpRel -> Exp GE Exp
Rule 44    ExpRel -> Exp LE Exp
Rule 45    ExpRel -> Exp EQ Exp
Rule 46    ExpRel -> Exp NEQ Exp

Terminals, with rules where they appear

(                    : 12 23 24 27 28
)                    : 12 23 24 27 28
*                    : 20
+                    : 17
,                    : 7 13
-                    : 18
/                    : 21
<                    : 42
=                    : 11
>                    : 41
AND                  : 35
COMMENT              : 
ELSE                 : 30
EQ                   : 45
FALSE                : 40
GE                   : 43
IF                   : 28
INPUT                : 24
INT                  : 5 23
LE                   : 44
NEQ                  : 46
NOT                  : 37
OR                   : 33
PRINT                : 12
STR                  : 6
TRUE                 : 39
WHILE                : 27
error                : 
id                   : 7 8 11 25
num                  : 26
str                  : 15 24
{                    : 32
}                    : 32

Nonterminals, with rules where they appear

Cond                 : 27 28 33
Cond2                : 33 34 35
Cond3                : 35 36
CondStatements       : 27 28 30
Declaration          : 2
Declarations         : 1 2
Else                 : 28
Exp                  : 11 16 17 18 23 41 41 42 42 43 43 44 44 45 45 46 46
ExpRel               : 37 38
Factor               : 20 21 22
IdList               : 4 7
PrintArg             : 13 14
PrintArgs            : 12 13
Program              : 0
Statement            : 9 10 31
Statements           : 1 9 32
Term                 : 17 18 19 20 21
Type                 : 4

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . Declarations Statements
    (2) Declarations -> . Declarations Declaration
    (3) Declarations -> .

    id              reduce using rule 3 (Declarations -> .)
    PRINT           reduce using rule 3 (Declarations -> .)
    WHILE           reduce using rule 3 (Declarations -> .)
    IF              reduce using rule 3 (Declarations -> .)
    INT             reduce using rule 3 (Declarations -> .)
    STR             reduce using rule 3 (Declarations -> .)

    Program                        shift and go to state 1
    Declarations                   shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> Declarations . Statements
    (2) Declarations -> Declarations . Declaration
    (9) Statements -> . Statements Statement
    (10) Statements -> . Statement
    (4) Declaration -> . Type IdList
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else
    (5) Type -> . INT
    (6) Type -> . STR

    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    INT             shift and go to state 11
    STR             shift and go to state 12

    Statements                     shift and go to state 3
    Declaration                    shift and go to state 4
    Statement                      shift and go to state 5
    Type                           shift and go to state 6

state 3

    (1) Program -> Declarations Statements .
    (9) Statements -> Statements . Statement
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else

    $end            reduce using rule 1 (Program -> Declarations Statements .)
    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10

    Statement                      shift and go to state 13

state 4

    (2) Declarations -> Declarations Declaration .

    id              reduce using rule 2 (Declarations -> Declarations Declaration .)
    PRINT           reduce using rule 2 (Declarations -> Declarations Declaration .)
    WHILE           reduce using rule 2 (Declarations -> Declarations Declaration .)
    IF              reduce using rule 2 (Declarations -> Declarations Declaration .)
    INT             reduce using rule 2 (Declarations -> Declarations Declaration .)
    STR             reduce using rule 2 (Declarations -> Declarations Declaration .)


state 5

    (10) Statements -> Statement .

    id              reduce using rule 10 (Statements -> Statement .)
    PRINT           reduce using rule 10 (Statements -> Statement .)
    WHILE           reduce using rule 10 (Statements -> Statement .)
    IF              reduce using rule 10 (Statements -> Statement .)
    $end            reduce using rule 10 (Statements -> Statement .)
    }               reduce using rule 10 (Statements -> Statement .)


state 6

    (4) Declaration -> Type . IdList
    (7) IdList -> . IdList , id
    (8) IdList -> . id

    id              shift and go to state 15

    IdList                         shift and go to state 14

state 7

    (11) Statement -> id . = Exp

    =               shift and go to state 16


state 8

    (12) Statement -> PRINT . ( PrintArgs )

    (               shift and go to state 17


state 9

    (27) Statement -> WHILE . ( Cond ) CondStatements

    (               shift and go to state 18


state 10

    (28) Statement -> IF . ( Cond ) CondStatements Else

    (               shift and go to state 19


state 11

    (5) Type -> INT .

    id              reduce using rule 5 (Type -> INT .)


state 12

    (6) Type -> STR .

    id              reduce using rule 6 (Type -> STR .)


state 13

    (9) Statements -> Statements Statement .

    id              reduce using rule 9 (Statements -> Statements Statement .)
    PRINT           reduce using rule 9 (Statements -> Statements Statement .)
    WHILE           reduce using rule 9 (Statements -> Statements Statement .)
    IF              reduce using rule 9 (Statements -> Statements Statement .)
    $end            reduce using rule 9 (Statements -> Statements Statement .)
    }               reduce using rule 9 (Statements -> Statements Statement .)


state 14

    (4) Declaration -> Type IdList .
    (7) IdList -> IdList . , id

    id              reduce using rule 4 (Declaration -> Type IdList .)
    PRINT           reduce using rule 4 (Declaration -> Type IdList .)
    WHILE           reduce using rule 4 (Declaration -> Type IdList .)
    IF              reduce using rule 4 (Declaration -> Type IdList .)
    INT             reduce using rule 4 (Declaration -> Type IdList .)
    STR             reduce using rule 4 (Declaration -> Type IdList .)
    ,               shift and go to state 20


state 15

    (8) IdList -> id .

    ,               reduce using rule 8 (IdList -> id .)
    id              reduce using rule 8 (IdList -> id .)
    PRINT           reduce using rule 8 (IdList -> id .)
    WHILE           reduce using rule 8 (IdList -> id .)
    IF              reduce using rule 8 (IdList -> id .)
    INT             reduce using rule 8 (IdList -> id .)
    STR             reduce using rule 8 (IdList -> id .)


state 16

    (11) Statement -> id = . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 22
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 17

    (12) Statement -> PRINT ( . PrintArgs )
    (13) PrintArgs -> . PrintArgs , PrintArg
    (14) PrintArgs -> . PrintArg
    (15) PrintArg -> . str
    (16) PrintArg -> . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    str             shift and go to state 30
    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    PrintArgs                      shift and go to state 28
    PrintArg                       shift and go to state 29
    Exp                            shift and go to state 31
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 18

    (27) Statement -> WHILE ( . Cond ) CondStatements
    (33) Cond -> . Cond OR Cond2
    (34) Cond -> . Cond2
    (35) Cond2 -> . Cond2 AND Cond3
    (36) Cond2 -> . Cond3
    (37) Cond3 -> . NOT ExpRel
    (38) Cond3 -> . ExpRel
    (39) Cond3 -> . TRUE
    (40) Cond3 -> . FALSE
    (41) ExpRel -> . Exp > Exp
    (42) ExpRel -> . Exp < Exp
    (43) ExpRel -> . Exp GE Exp
    (44) ExpRel -> . Exp LE Exp
    (45) ExpRel -> . Exp EQ Exp
    (46) ExpRel -> . Exp NEQ Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    NOT             shift and go to state 35
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Cond                           shift and go to state 32
    Cond2                          shift and go to state 33
    Cond3                          shift and go to state 34
    ExpRel                         shift and go to state 36
    Exp                            shift and go to state 39
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 19

    (28) Statement -> IF ( . Cond ) CondStatements Else
    (33) Cond -> . Cond OR Cond2
    (34) Cond -> . Cond2
    (35) Cond2 -> . Cond2 AND Cond3
    (36) Cond2 -> . Cond3
    (37) Cond3 -> . NOT ExpRel
    (38) Cond3 -> . ExpRel
    (39) Cond3 -> . TRUE
    (40) Cond3 -> . FALSE
    (41) ExpRel -> . Exp > Exp
    (42) ExpRel -> . Exp < Exp
    (43) ExpRel -> . Exp GE Exp
    (44) ExpRel -> . Exp LE Exp
    (45) ExpRel -> . Exp EQ Exp
    (46) ExpRel -> . Exp NEQ Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    NOT             shift and go to state 35
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Cond                           shift and go to state 40
    Cond2                          shift and go to state 33
    Cond3                          shift and go to state 34
    ExpRel                         shift and go to state 36
    Exp                            shift and go to state 39
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 20

    (7) IdList -> IdList , . id

    id              shift and go to state 41


state 21

    (25) Factor -> id .

    *               reduce using rule 25 (Factor -> id .)
    /               reduce using rule 25 (Factor -> id .)
    +               reduce using rule 25 (Factor -> id .)
    -               reduce using rule 25 (Factor -> id .)
    id              reduce using rule 25 (Factor -> id .)
    PRINT           reduce using rule 25 (Factor -> id .)
    WHILE           reduce using rule 25 (Factor -> id .)
    IF              reduce using rule 25 (Factor -> id .)
    $end            reduce using rule 25 (Factor -> id .)
    ELSE            reduce using rule 25 (Factor -> id .)
    }               reduce using rule 25 (Factor -> id .)
    )               reduce using rule 25 (Factor -> id .)
    ,               reduce using rule 25 (Factor -> id .)
    >               reduce using rule 25 (Factor -> id .)
    <               reduce using rule 25 (Factor -> id .)
    GE              reduce using rule 25 (Factor -> id .)
    LE              reduce using rule 25 (Factor -> id .)
    EQ              reduce using rule 25 (Factor -> id .)
    NEQ             reduce using rule 25 (Factor -> id .)
    AND             reduce using rule 25 (Factor -> id .)
    OR              reduce using rule 25 (Factor -> id .)


state 22

    (11) Statement -> id = Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    id              reduce using rule 11 (Statement -> id = Exp .)
    PRINT           reduce using rule 11 (Statement -> id = Exp .)
    WHILE           reduce using rule 11 (Statement -> id = Exp .)
    IF              reduce using rule 11 (Statement -> id = Exp .)
    $end            reduce using rule 11 (Statement -> id = Exp .)
    ELSE            reduce using rule 11 (Statement -> id = Exp .)
    }               reduce using rule 11 (Statement -> id = Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 23

    (19) Exp -> Term .
    (20) Term -> Term . * Factor
    (21) Term -> Term . / Factor

    +               reduce using rule 19 (Exp -> Term .)
    -               reduce using rule 19 (Exp -> Term .)
    id              reduce using rule 19 (Exp -> Term .)
    PRINT           reduce using rule 19 (Exp -> Term .)
    WHILE           reduce using rule 19 (Exp -> Term .)
    IF              reduce using rule 19 (Exp -> Term .)
    $end            reduce using rule 19 (Exp -> Term .)
    ELSE            reduce using rule 19 (Exp -> Term .)
    }               reduce using rule 19 (Exp -> Term .)
    )               reduce using rule 19 (Exp -> Term .)
    ,               reduce using rule 19 (Exp -> Term .)
    >               reduce using rule 19 (Exp -> Term .)
    <               reduce using rule 19 (Exp -> Term .)
    GE              reduce using rule 19 (Exp -> Term .)
    LE              reduce using rule 19 (Exp -> Term .)
    EQ              reduce using rule 19 (Exp -> Term .)
    NEQ             reduce using rule 19 (Exp -> Term .)
    AND             reduce using rule 19 (Exp -> Term .)
    OR              reduce using rule 19 (Exp -> Term .)
    *               shift and go to state 44
    /               shift and go to state 45


state 24

    (22) Term -> Factor .

    *               reduce using rule 22 (Term -> Factor .)
    /               reduce using rule 22 (Term -> Factor .)
    +               reduce using rule 22 (Term -> Factor .)
    -               reduce using rule 22 (Term -> Factor .)
    id              reduce using rule 22 (Term -> Factor .)
    PRINT           reduce using rule 22 (Term -> Factor .)
    WHILE           reduce using rule 22 (Term -> Factor .)
    IF              reduce using rule 22 (Term -> Factor .)
    $end            reduce using rule 22 (Term -> Factor .)
    ELSE            reduce using rule 22 (Term -> Factor .)
    }               reduce using rule 22 (Term -> Factor .)
    )               reduce using rule 22 (Term -> Factor .)
    ,               reduce using rule 22 (Term -> Factor .)
    >               reduce using rule 22 (Term -> Factor .)
    <               reduce using rule 22 (Term -> Factor .)
    GE              reduce using rule 22 (Term -> Factor .)
    LE              reduce using rule 22 (Term -> Factor .)
    EQ              reduce using rule 22 (Term -> Factor .)
    NEQ             reduce using rule 22 (Term -> Factor .)
    AND             reduce using rule 22 (Term -> Factor .)
    OR              reduce using rule 22 (Term -> Factor .)


state 25

    (23) Factor -> INT . ( Exp )

    (               shift and go to state 46


state 26

    (24) Factor -> INPUT . ( str )

    (               shift and go to state 47


state 27

    (26) Factor -> num .

    *               reduce using rule 26 (Factor -> num .)
    /               reduce using rule 26 (Factor -> num .)
    +               reduce using rule 26 (Factor -> num .)
    -               reduce using rule 26 (Factor -> num .)
    id              reduce using rule 26 (Factor -> num .)
    PRINT           reduce using rule 26 (Factor -> num .)
    WHILE           reduce using rule 26 (Factor -> num .)
    IF              reduce using rule 26 (Factor -> num .)
    $end            reduce using rule 26 (Factor -> num .)
    ELSE            reduce using rule 26 (Factor -> num .)
    }               reduce using rule 26 (Factor -> num .)
    )               reduce using rule 26 (Factor -> num .)
    ,               reduce using rule 26 (Factor -> num .)
    >               reduce using rule 26 (Factor -> num .)
    <               reduce using rule 26 (Factor -> num .)
    GE              reduce using rule 26 (Factor -> num .)
    LE              reduce using rule 26 (Factor -> num .)
    EQ              reduce using rule 26 (Factor -> num .)
    NEQ             reduce using rule 26 (Factor -> num .)
    AND             reduce using rule 26 (Factor -> num .)
    OR              reduce using rule 26 (Factor -> num .)


state 28

    (12) Statement -> PRINT ( PrintArgs . )
    (13) PrintArgs -> PrintArgs . , PrintArg

    )               shift and go to state 48
    ,               shift and go to state 49


state 29

    (14) PrintArgs -> PrintArg .

    )               reduce using rule 14 (PrintArgs -> PrintArg .)
    ,               reduce using rule 14 (PrintArgs -> PrintArg .)


state 30

    (15) PrintArg -> str .

    )               reduce using rule 15 (PrintArg -> str .)
    ,               reduce using rule 15 (PrintArg -> str .)


state 31

    (16) PrintArg -> Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    )               reduce using rule 16 (PrintArg -> Exp .)
    ,               reduce using rule 16 (PrintArg -> Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 32

    (27) Statement -> WHILE ( Cond . ) CondStatements
    (33) Cond -> Cond . OR Cond2

    )               shift and go to state 50
    OR              shift and go to state 51


state 33

    (34) Cond -> Cond2 .
    (35) Cond2 -> Cond2 . AND Cond3

    )               reduce using rule 34 (Cond -> Cond2 .)
    OR              reduce using rule 34 (Cond -> Cond2 .)
    AND             shift and go to state 52


state 34

    (36) Cond2 -> Cond3 .

    AND             reduce using rule 36 (Cond2 -> Cond3 .)
    )               reduce using rule 36 (Cond2 -> Cond3 .)
    OR              reduce using rule 36 (Cond2 -> Cond3 .)


state 35

    (37) Cond3 -> NOT . ExpRel
    (41) ExpRel -> . Exp > Exp
    (42) ExpRel -> . Exp < Exp
    (43) ExpRel -> . Exp GE Exp
    (44) ExpRel -> . Exp LE Exp
    (45) ExpRel -> . Exp EQ Exp
    (46) ExpRel -> . Exp NEQ Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    ExpRel                         shift and go to state 53
    Exp                            shift and go to state 39
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 36

    (38) Cond3 -> ExpRel .

    AND             reduce using rule 38 (Cond3 -> ExpRel .)
    )               reduce using rule 38 (Cond3 -> ExpRel .)
    OR              reduce using rule 38 (Cond3 -> ExpRel .)


state 37

    (39) Cond3 -> TRUE .

    AND             reduce using rule 39 (Cond3 -> TRUE .)
    )               reduce using rule 39 (Cond3 -> TRUE .)
    OR              reduce using rule 39 (Cond3 -> TRUE .)


state 38

    (40) Cond3 -> FALSE .

    AND             reduce using rule 40 (Cond3 -> FALSE .)
    )               reduce using rule 40 (Cond3 -> FALSE .)
    OR              reduce using rule 40 (Cond3 -> FALSE .)


state 39

    (41) ExpRel -> Exp . > Exp
    (42) ExpRel -> Exp . < Exp
    (43) ExpRel -> Exp . GE Exp
    (44) ExpRel -> Exp . LE Exp
    (45) ExpRel -> Exp . EQ Exp
    (46) ExpRel -> Exp . NEQ Exp
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    >               shift and go to state 54
    <               shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQ              shift and go to state 58
    NEQ             shift and go to state 59
    +               shift and go to state 42
    -               shift and go to state 43


state 40

    (28) Statement -> IF ( Cond . ) CondStatements Else
    (33) Cond -> Cond . OR Cond2

    )               shift and go to state 60
    OR              shift and go to state 51


state 41

    (7) IdList -> IdList , id .

    ,               reduce using rule 7 (IdList -> IdList , id .)
    id              reduce using rule 7 (IdList -> IdList , id .)
    PRINT           reduce using rule 7 (IdList -> IdList , id .)
    WHILE           reduce using rule 7 (IdList -> IdList , id .)
    IF              reduce using rule 7 (IdList -> IdList , id .)
    INT             reduce using rule 7 (IdList -> IdList , id .)
    STR             reduce using rule 7 (IdList -> IdList , id .)


state 42

    (17) Exp -> Exp + . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Term                           shift and go to state 61
    Factor                         shift and go to state 24

state 43

    (18) Exp -> Exp - . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Term                           shift and go to state 62
    Factor                         shift and go to state 24

state 44

    (20) Term -> Term * . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Factor                         shift and go to state 63

state 45

    (21) Term -> Term / . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Factor                         shift and go to state 64

state 46

    (23) Factor -> INT ( . Exp )
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 65
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 47

    (24) Factor -> INPUT ( . str )

    str             shift and go to state 66


state 48

    (12) Statement -> PRINT ( PrintArgs ) .

    id              reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)
    PRINT           reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)
    WHILE           reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)
    IF              reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)
    $end            reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)
    ELSE            reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)
    }               reduce using rule 12 (Statement -> PRINT ( PrintArgs ) .)


state 49

    (13) PrintArgs -> PrintArgs , . PrintArg
    (15) PrintArg -> . str
    (16) PrintArg -> . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    str             shift and go to state 30
    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    PrintArg                       shift and go to state 67
    Exp                            shift and go to state 31
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 50

    (27) Statement -> WHILE ( Cond ) . CondStatements
    (31) CondStatements -> . Statement
    (32) CondStatements -> . { Statements }
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else

    {               shift and go to state 70
    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10

    CondStatements                 shift and go to state 68
    Statement                      shift and go to state 69

state 51

    (33) Cond -> Cond OR . Cond2
    (35) Cond2 -> . Cond2 AND Cond3
    (36) Cond2 -> . Cond3
    (37) Cond3 -> . NOT ExpRel
    (38) Cond3 -> . ExpRel
    (39) Cond3 -> . TRUE
    (40) Cond3 -> . FALSE
    (41) ExpRel -> . Exp > Exp
    (42) ExpRel -> . Exp < Exp
    (43) ExpRel -> . Exp GE Exp
    (44) ExpRel -> . Exp LE Exp
    (45) ExpRel -> . Exp EQ Exp
    (46) ExpRel -> . Exp NEQ Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    NOT             shift and go to state 35
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Cond2                          shift and go to state 71
    Cond3                          shift and go to state 34
    ExpRel                         shift and go to state 36
    Exp                            shift and go to state 39
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 52

    (35) Cond2 -> Cond2 AND . Cond3
    (37) Cond3 -> . NOT ExpRel
    (38) Cond3 -> . ExpRel
    (39) Cond3 -> . TRUE
    (40) Cond3 -> . FALSE
    (41) ExpRel -> . Exp > Exp
    (42) ExpRel -> . Exp < Exp
    (43) ExpRel -> . Exp GE Exp
    (44) ExpRel -> . Exp LE Exp
    (45) ExpRel -> . Exp EQ Exp
    (46) ExpRel -> . Exp NEQ Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    NOT             shift and go to state 35
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Cond3                          shift and go to state 72
    ExpRel                         shift and go to state 36
    Exp                            shift and go to state 39
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 53

    (37) Cond3 -> NOT ExpRel .

    AND             reduce using rule 37 (Cond3 -> NOT ExpRel .)
    )               reduce using rule 37 (Cond3 -> NOT ExpRel .)
    OR              reduce using rule 37 (Cond3 -> NOT ExpRel .)


state 54

    (41) ExpRel -> Exp > . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 73
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 55

    (42) ExpRel -> Exp < . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 74
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 56

    (43) ExpRel -> Exp GE . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 75
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 57

    (44) ExpRel -> Exp LE . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 76
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 58

    (45) ExpRel -> Exp EQ . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 77
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 59

    (46) ExpRel -> Exp NEQ . Exp
    (17) Exp -> . Exp + Term
    (18) Exp -> . Exp - Term
    (19) Exp -> . Term
    (20) Term -> . Term * Factor
    (21) Term -> . Term / Factor
    (22) Term -> . Factor
    (23) Factor -> . INT ( Exp )
    (24) Factor -> . INPUT ( str )
    (25) Factor -> . id
    (26) Factor -> . num

    INT             shift and go to state 25
    INPUT           shift and go to state 26
    id              shift and go to state 21
    num             shift and go to state 27

    Exp                            shift and go to state 78
    Term                           shift and go to state 23
    Factor                         shift and go to state 24

state 60

    (28) Statement -> IF ( Cond ) . CondStatements Else
    (31) CondStatements -> . Statement
    (32) CondStatements -> . { Statements }
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else

    {               shift and go to state 70
    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10

    CondStatements                 shift and go to state 79
    Statement                      shift and go to state 69

state 61

    (17) Exp -> Exp + Term .
    (20) Term -> Term . * Factor
    (21) Term -> Term . / Factor

    +               reduce using rule 17 (Exp -> Exp + Term .)
    -               reduce using rule 17 (Exp -> Exp + Term .)
    id              reduce using rule 17 (Exp -> Exp + Term .)
    PRINT           reduce using rule 17 (Exp -> Exp + Term .)
    WHILE           reduce using rule 17 (Exp -> Exp + Term .)
    IF              reduce using rule 17 (Exp -> Exp + Term .)
    $end            reduce using rule 17 (Exp -> Exp + Term .)
    ELSE            reduce using rule 17 (Exp -> Exp + Term .)
    }               reduce using rule 17 (Exp -> Exp + Term .)
    )               reduce using rule 17 (Exp -> Exp + Term .)
    ,               reduce using rule 17 (Exp -> Exp + Term .)
    >               reduce using rule 17 (Exp -> Exp + Term .)
    <               reduce using rule 17 (Exp -> Exp + Term .)
    GE              reduce using rule 17 (Exp -> Exp + Term .)
    LE              reduce using rule 17 (Exp -> Exp + Term .)
    EQ              reduce using rule 17 (Exp -> Exp + Term .)
    NEQ             reduce using rule 17 (Exp -> Exp + Term .)
    AND             reduce using rule 17 (Exp -> Exp + Term .)
    OR              reduce using rule 17 (Exp -> Exp + Term .)
    *               shift and go to state 44
    /               shift and go to state 45


state 62

    (18) Exp -> Exp - Term .
    (20) Term -> Term . * Factor
    (21) Term -> Term . / Factor

    +               reduce using rule 18 (Exp -> Exp - Term .)
    -               reduce using rule 18 (Exp -> Exp - Term .)
    id              reduce using rule 18 (Exp -> Exp - Term .)
    PRINT           reduce using rule 18 (Exp -> Exp - Term .)
    WHILE           reduce using rule 18 (Exp -> Exp - Term .)
    IF              reduce using rule 18 (Exp -> Exp - Term .)
    $end            reduce using rule 18 (Exp -> Exp - Term .)
    ELSE            reduce using rule 18 (Exp -> Exp - Term .)
    }               reduce using rule 18 (Exp -> Exp - Term .)
    )               reduce using rule 18 (Exp -> Exp - Term .)
    ,               reduce using rule 18 (Exp -> Exp - Term .)
    >               reduce using rule 18 (Exp -> Exp - Term .)
    <               reduce using rule 18 (Exp -> Exp - Term .)
    GE              reduce using rule 18 (Exp -> Exp - Term .)
    LE              reduce using rule 18 (Exp -> Exp - Term .)
    EQ              reduce using rule 18 (Exp -> Exp - Term .)
    NEQ             reduce using rule 18 (Exp -> Exp - Term .)
    AND             reduce using rule 18 (Exp -> Exp - Term .)
    OR              reduce using rule 18 (Exp -> Exp - Term .)
    *               shift and go to state 44
    /               shift and go to state 45


state 63

    (20) Term -> Term * Factor .

    *               reduce using rule 20 (Term -> Term * Factor .)
    /               reduce using rule 20 (Term -> Term * Factor .)
    +               reduce using rule 20 (Term -> Term * Factor .)
    -               reduce using rule 20 (Term -> Term * Factor .)
    id              reduce using rule 20 (Term -> Term * Factor .)
    PRINT           reduce using rule 20 (Term -> Term * Factor .)
    WHILE           reduce using rule 20 (Term -> Term * Factor .)
    IF              reduce using rule 20 (Term -> Term * Factor .)
    $end            reduce using rule 20 (Term -> Term * Factor .)
    ELSE            reduce using rule 20 (Term -> Term * Factor .)
    }               reduce using rule 20 (Term -> Term * Factor .)
    )               reduce using rule 20 (Term -> Term * Factor .)
    ,               reduce using rule 20 (Term -> Term * Factor .)
    >               reduce using rule 20 (Term -> Term * Factor .)
    <               reduce using rule 20 (Term -> Term * Factor .)
    GE              reduce using rule 20 (Term -> Term * Factor .)
    LE              reduce using rule 20 (Term -> Term * Factor .)
    EQ              reduce using rule 20 (Term -> Term * Factor .)
    NEQ             reduce using rule 20 (Term -> Term * Factor .)
    AND             reduce using rule 20 (Term -> Term * Factor .)
    OR              reduce using rule 20 (Term -> Term * Factor .)


state 64

    (21) Term -> Term / Factor .

    *               reduce using rule 21 (Term -> Term / Factor .)
    /               reduce using rule 21 (Term -> Term / Factor .)
    +               reduce using rule 21 (Term -> Term / Factor .)
    -               reduce using rule 21 (Term -> Term / Factor .)
    id              reduce using rule 21 (Term -> Term / Factor .)
    PRINT           reduce using rule 21 (Term -> Term / Factor .)
    WHILE           reduce using rule 21 (Term -> Term / Factor .)
    IF              reduce using rule 21 (Term -> Term / Factor .)
    $end            reduce using rule 21 (Term -> Term / Factor .)
    ELSE            reduce using rule 21 (Term -> Term / Factor .)
    }               reduce using rule 21 (Term -> Term / Factor .)
    )               reduce using rule 21 (Term -> Term / Factor .)
    ,               reduce using rule 21 (Term -> Term / Factor .)
    >               reduce using rule 21 (Term -> Term / Factor .)
    <               reduce using rule 21 (Term -> Term / Factor .)
    GE              reduce using rule 21 (Term -> Term / Factor .)
    LE              reduce using rule 21 (Term -> Term / Factor .)
    EQ              reduce using rule 21 (Term -> Term / Factor .)
    NEQ             reduce using rule 21 (Term -> Term / Factor .)
    AND             reduce using rule 21 (Term -> Term / Factor .)
    OR              reduce using rule 21 (Term -> Term / Factor .)


state 65

    (23) Factor -> INT ( Exp . )
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    )               shift and go to state 80
    +               shift and go to state 42
    -               shift and go to state 43


state 66

    (24) Factor -> INPUT ( str . )

    )               shift and go to state 81


state 67

    (13) PrintArgs -> PrintArgs , PrintArg .

    )               reduce using rule 13 (PrintArgs -> PrintArgs , PrintArg .)
    ,               reduce using rule 13 (PrintArgs -> PrintArgs , PrintArg .)


state 68

    (27) Statement -> WHILE ( Cond ) CondStatements .

    id              reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)
    PRINT           reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)
    WHILE           reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)
    IF              reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)
    $end            reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)
    ELSE            reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)
    }               reduce using rule 27 (Statement -> WHILE ( Cond ) CondStatements .)


state 69

    (31) CondStatements -> Statement .

    id              reduce using rule 31 (CondStatements -> Statement .)
    PRINT           reduce using rule 31 (CondStatements -> Statement .)
    WHILE           reduce using rule 31 (CondStatements -> Statement .)
    IF              reduce using rule 31 (CondStatements -> Statement .)
    $end            reduce using rule 31 (CondStatements -> Statement .)
    ELSE            reduce using rule 31 (CondStatements -> Statement .)
    }               reduce using rule 31 (CondStatements -> Statement .)


state 70

    (32) CondStatements -> { . Statements }
    (9) Statements -> . Statements Statement
    (10) Statements -> . Statement
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else

    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10

    Statements                     shift and go to state 82
    Statement                      shift and go to state 5

state 71

    (33) Cond -> Cond OR Cond2 .
    (35) Cond2 -> Cond2 . AND Cond3

    )               reduce using rule 33 (Cond -> Cond OR Cond2 .)
    OR              reduce using rule 33 (Cond -> Cond OR Cond2 .)
    AND             shift and go to state 52


state 72

    (35) Cond2 -> Cond2 AND Cond3 .

    AND             reduce using rule 35 (Cond2 -> Cond2 AND Cond3 .)
    )               reduce using rule 35 (Cond2 -> Cond2 AND Cond3 .)
    OR              reduce using rule 35 (Cond2 -> Cond2 AND Cond3 .)


state 73

    (41) ExpRel -> Exp > Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    AND             reduce using rule 41 (ExpRel -> Exp > Exp .)
    )               reduce using rule 41 (ExpRel -> Exp > Exp .)
    OR              reduce using rule 41 (ExpRel -> Exp > Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 74

    (42) ExpRel -> Exp < Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    AND             reduce using rule 42 (ExpRel -> Exp < Exp .)
    )               reduce using rule 42 (ExpRel -> Exp < Exp .)
    OR              reduce using rule 42 (ExpRel -> Exp < Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 75

    (43) ExpRel -> Exp GE Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    AND             reduce using rule 43 (ExpRel -> Exp GE Exp .)
    )               reduce using rule 43 (ExpRel -> Exp GE Exp .)
    OR              reduce using rule 43 (ExpRel -> Exp GE Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 76

    (44) ExpRel -> Exp LE Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    AND             reduce using rule 44 (ExpRel -> Exp LE Exp .)
    )               reduce using rule 44 (ExpRel -> Exp LE Exp .)
    OR              reduce using rule 44 (ExpRel -> Exp LE Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 77

    (45) ExpRel -> Exp EQ Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    AND             reduce using rule 45 (ExpRel -> Exp EQ Exp .)
    )               reduce using rule 45 (ExpRel -> Exp EQ Exp .)
    OR              reduce using rule 45 (ExpRel -> Exp EQ Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 78

    (46) ExpRel -> Exp NEQ Exp .
    (17) Exp -> Exp . + Term
    (18) Exp -> Exp . - Term

    AND             reduce using rule 46 (ExpRel -> Exp NEQ Exp .)
    )               reduce using rule 46 (ExpRel -> Exp NEQ Exp .)
    OR              reduce using rule 46 (ExpRel -> Exp NEQ Exp .)
    +               shift and go to state 42
    -               shift and go to state 43


state 79

    (28) Statement -> IF ( Cond ) CondStatements . Else
    (29) Else -> .
    (30) Else -> . ELSE CondStatements

  ! shift/reduce conflict for ELSE resolved as shift
    id              reduce using rule 29 (Else -> .)
    PRINT           reduce using rule 29 (Else -> .)
    WHILE           reduce using rule 29 (Else -> .)
    IF              reduce using rule 29 (Else -> .)
    $end            reduce using rule 29 (Else -> .)
    }               reduce using rule 29 (Else -> .)
    ELSE            shift and go to state 84

  ! ELSE            [ reduce using rule 29 (Else -> .) ]

    Else                           shift and go to state 83

state 80

    (23) Factor -> INT ( Exp ) .

    *               reduce using rule 23 (Factor -> INT ( Exp ) .)
    /               reduce using rule 23 (Factor -> INT ( Exp ) .)
    +               reduce using rule 23 (Factor -> INT ( Exp ) .)
    -               reduce using rule 23 (Factor -> INT ( Exp ) .)
    id              reduce using rule 23 (Factor -> INT ( Exp ) .)
    PRINT           reduce using rule 23 (Factor -> INT ( Exp ) .)
    WHILE           reduce using rule 23 (Factor -> INT ( Exp ) .)
    IF              reduce using rule 23 (Factor -> INT ( Exp ) .)
    $end            reduce using rule 23 (Factor -> INT ( Exp ) .)
    ELSE            reduce using rule 23 (Factor -> INT ( Exp ) .)
    }               reduce using rule 23 (Factor -> INT ( Exp ) .)
    )               reduce using rule 23 (Factor -> INT ( Exp ) .)
    ,               reduce using rule 23 (Factor -> INT ( Exp ) .)
    >               reduce using rule 23 (Factor -> INT ( Exp ) .)
    <               reduce using rule 23 (Factor -> INT ( Exp ) .)
    GE              reduce using rule 23 (Factor -> INT ( Exp ) .)
    LE              reduce using rule 23 (Factor -> INT ( Exp ) .)
    EQ              reduce using rule 23 (Factor -> INT ( Exp ) .)
    NEQ             reduce using rule 23 (Factor -> INT ( Exp ) .)
    AND             reduce using rule 23 (Factor -> INT ( Exp ) .)
    OR              reduce using rule 23 (Factor -> INT ( Exp ) .)


state 81

    (24) Factor -> INPUT ( str ) .

    *               reduce using rule 24 (Factor -> INPUT ( str ) .)
    /               reduce using rule 24 (Factor -> INPUT ( str ) .)
    +               reduce using rule 24 (Factor -> INPUT ( str ) .)
    -               reduce using rule 24 (Factor -> INPUT ( str ) .)
    id              reduce using rule 24 (Factor -> INPUT ( str ) .)
    PRINT           reduce using rule 24 (Factor -> INPUT ( str ) .)
    WHILE           reduce using rule 24 (Factor -> INPUT ( str ) .)
    IF              reduce using rule 24 (Factor -> INPUT ( str ) .)
    $end            reduce using rule 24 (Factor -> INPUT ( str ) .)
    ELSE            reduce using rule 24 (Factor -> INPUT ( str ) .)
    }               reduce using rule 24 (Factor -> INPUT ( str ) .)
    )               reduce using rule 24 (Factor -> INPUT ( str ) .)
    ,               reduce using rule 24 (Factor -> INPUT ( str ) .)
    >               reduce using rule 24 (Factor -> INPUT ( str ) .)
    <               reduce using rule 24 (Factor -> INPUT ( str ) .)
    GE              reduce using rule 24 (Factor -> INPUT ( str ) .)
    LE              reduce using rule 24 (Factor -> INPUT ( str ) .)
    EQ              reduce using rule 24 (Factor -> INPUT ( str ) .)
    NEQ             reduce using rule 24 (Factor -> INPUT ( str ) .)
    AND             reduce using rule 24 (Factor -> INPUT ( str ) .)
    OR              reduce using rule 24 (Factor -> INPUT ( str ) .)


state 82

    (32) CondStatements -> { Statements . }
    (9) Statements -> Statements . Statement
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else

    }               shift and go to state 85
    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10

    Statement                      shift and go to state 13

state 83

    (28) Statement -> IF ( Cond ) CondStatements Else .

    id              reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)
    PRINT           reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)
    WHILE           reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)
    IF              reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)
    $end            reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)
    ELSE            reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)
    }               reduce using rule 28 (Statement -> IF ( Cond ) CondStatements Else .)


state 84

    (30) Else -> ELSE . CondStatements
    (31) CondStatements -> . Statement
    (32) CondStatements -> . { Statements }
    (11) Statement -> . id = Exp
    (12) Statement -> . PRINT ( PrintArgs )
    (27) Statement -> . WHILE ( Cond ) CondStatements
    (28) Statement -> . IF ( Cond ) CondStatements Else

    {               shift and go to state 70
    id              shift and go to state 7
    PRINT           shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10

    CondStatements                 shift and go to state 86
    Statement                      shift and go to state 69

state 85

    (32) CondStatements -> { Statements } .

    id              reduce using rule 32 (CondStatements -> { Statements } .)
    PRINT           reduce using rule 32 (CondStatements -> { Statements } .)
    WHILE           reduce using rule 32 (CondStatements -> { Statements } .)
    IF              reduce using rule 32 (CondStatements -> { Statements } .)
    $end            reduce using rule 32 (CondStatements -> { Statements } .)
    ELSE            reduce using rule 32 (CondStatements -> { Statements } .)
    }               reduce using rule 32 (CondStatements -> { Statements } .)


state 86

    (30) Else -> ELSE CondStatements .

    id              reduce using rule 30 (Else -> ELSE CondStatements .)
    PRINT           reduce using rule 30 (Else -> ELSE CondStatements .)
    WHILE           reduce using rule 30 (Else -> ELSE CondStatements .)
    IF              reduce using rule 30 (Else -> ELSE CondStatements .)
    $end            reduce using rule 30 (Else -> ELSE CondStatements .)
    ELSE            reduce using rule 30 (Else -> ELSE CondStatements .)
    }               reduce using rule 30 (Else -> ELSE CondStatements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 79 resolved as shift
