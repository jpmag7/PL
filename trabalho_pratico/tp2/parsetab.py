
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CODE COMMENT DICIONARY ID IGNORE LEXERROR LEXSTART LINE LISTA LITERALS PRECEDENCE PRODUCTION PYTHON RESERVED RETURN STATES STRING TOKENS VARIABLE YACCERROR YACCSTARTZ : InitInit : CodInit : COMMENTInit : Cod COMMENTInit : Cod : LexCod : YaccCod : PythonLex : LEXSTARTLex : '%' LITERALS '=' STRINGLex : '%' IGNORE '=' STRINGLex : '%' TOKENS '=' LISTALex : '%' STATES '=' LISTALex : '%' RESERVED '=' DICIONARYLex : STRING RETURN '(' ID ',' CODE ')'Lex : LEXERROR '(' STRING ',' CODE ')'Yacc : YACCSTARTYacc : '%' PRECEDENCE '=' LISTAYacc : ID PRODUCTION CODEYacc : VARIABLEYacc : YACCERROR '(' STRING ',' CODE ')'Python : PYTHONPython : LINE"
    
_lr_action_items = {'COMMENT':([0,3,5,6,7,8,13,14,16,17,36,39,40,41,42,43,44,52,53,54,],[4,18,-6,-7,-8,-9,-17,-20,-22,-23,-19,-10,-11,-12,-13,-14,-18,-16,-21,-15,]),'$end':([0,1,2,3,4,5,6,7,8,13,14,16,17,18,36,39,40,41,42,43,44,52,53,54,],[-5,0,-1,-2,-3,-6,-7,-8,-9,-17,-20,-22,-23,-4,-19,-10,-11,-12,-13,-14,-18,-16,-21,-15,]),'LEXSTART':([0,],[8,]),'%':([0,],[9,]),'STRING':([0,27,28,29,30,],[10,37,38,39,40,]),'LEXERROR':([0,],[12,]),'YACCSTART':([0,],[13,]),'ID':([0,35,],[11,45,]),'VARIABLE':([0,],[14,]),'YACCERROR':([0,],[15,]),'PYTHON':([0,],[16,]),'LINE':([0,],[17,]),'LITERALS':([9,],[19,]),'IGNORE':([9,],[20,]),'TOKENS':([9,],[21,]),'STATES':([9,],[22,]),'RESERVED':([9,],[23,]),'PRECEDENCE':([9,],[24,]),'RETURN':([10,],[25,]),'PRODUCTION':([11,],[26,]),'(':([12,15,25,],[27,28,35,]),'=':([19,20,21,22,23,24,],[29,30,31,32,33,34,]),'CODE':([26,46,47,48,],[36,49,50,51,]),'LISTA':([31,32,34,],[41,42,44,]),'DICIONARY':([33,],[43,]),',':([37,38,45,],[46,47,48,]),')':([49,50,51,],[52,53,54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Z':([0,],[1,]),'Init':([0,],[2,]),'Cod':([0,],[3,]),'Lex':([0,],[5,]),'Yacc':([0,],[6,]),'Python':([0,],[7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Z","S'",1,None,None,None),
  ('Z -> Init','Z',1,'p_Z','parser.py',7),
  ('Init -> Cod','Init',1,'p_Init_cod','parser.py',10),
  ('Init -> COMMENT','Init',1,'p_Init_comment','parser.py',13),
  ('Init -> Cod COMMENT','Init',2,'p_Init_cod_comment','parser.py',16),
  ('Init -> <empty>','Init',0,'p_Init_none','parser.py',19),
  ('Cod -> Lex','Cod',1,'p_Cod_lex','parser.py',22),
  ('Cod -> Yacc','Cod',1,'p_Cod_yacc','parser.py',26),
  ('Cod -> Python','Cod',1,'p_Cod_py','parser.py',30),
  ('Lex -> LEXSTART','Lex',1,'p_Lex_start','parser.py',34),
  ('Lex -> % LITERALS = STRING','Lex',4,'p_Lex_literals','parser.py',38),
  ('Lex -> % IGNORE = STRING','Lex',4,'p_Lex_ignore','parser.py',42),
  ('Lex -> % TOKENS = LISTA','Lex',4,'p_Lex_tokens','parser.py',46),
  ('Lex -> % STATES = LISTA','Lex',4,'p_Lex_states','parser.py',50),
  ('Lex -> % RESERVED = DICIONARY','Lex',4,'p_Lex_reserved','parser.py',54),
  ('Lex -> STRING RETURN ( ID , CODE )','Lex',7,'p_Lex_re','parser.py',58),
  ('Lex -> LEXERROR ( STRING , CODE )','Lex',6,'p_Lex_error','parser.py',62),
  ('Yacc -> YACCSTART','Yacc',1,'p_Yacc_start','parser.py',68),
  ('Yacc -> % PRECEDENCE = LISTA','Yacc',4,'p_Yacc_precedence','parser.py',72),
  ('Yacc -> ID PRODUCTION CODE','Yacc',3,'p_Yacc_production','parser.py',76),
  ('Yacc -> VARIABLE','Yacc',1,'p_Yacc_variable','parser.py',81),
  ('Yacc -> YACCERROR ( STRING , CODE )','Yacc',6,'p_Yacc_error','parser.py',85),
  ('Python -> PYTHON','Python',1,'p_Python_start','parser.py',91),
  ('Python -> LINE','Python',1,'p_Python_line','parser.py',95),
]
