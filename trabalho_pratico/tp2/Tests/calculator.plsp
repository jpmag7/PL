%% LEX

%literals = "+-/*=()"    # a single char
%ignore   = " \t\n"
%tokens   = ['VAR','NUMBER']

"[a-zA-Z_][a-zA-Z0-9_]*"  return(VAR, <>)
"\d+(\.\d+)?"             return(NUMBER, <t.value = float(t.value)>)

error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]", <t.lexer.skip(1)>)

%% YACC

%precedence = [('left','+','-'), ('left','*','/'), ('right','UMINUS')]

# symboltable : dictionary of variables
ts = { }

stat : VAR '=' exp          <ts[t[1]] = t[3]>
stat : exp                  <print(t[1])>
exp  : exp '+' exp          <t[0] = t[1]+t[3]>
exp  : exp '-' exp          <t[0] = t[1]-t[3]>
exp  : exp '*' exp          <t[0] = t[1]*t[3]>
exp  : exp '/' exp          <t[0] = t[1]/t[3]>
exp  : '-' exp %prec UMINUS <t[0] = -t[2]>
exp  : '(' exp ')'          <t[0] = t[2]>
exp  : NUMBER               <t[0] = t[1]>
exp  : VAR                  <t[0] = getval(t[1])>

error(f"Syntax error at '{t.value}', [{t.lexer.lineno}]", <>)

%% PYTHON

import sys

def getval(n):
    if n not in ts: print(f"Undefined name '{n}'")
    return ts.get(n,0)

for line in sys.stdin:
    parser.parse(line)